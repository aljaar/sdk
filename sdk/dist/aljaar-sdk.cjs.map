{"version":3,"file":"aljaar-sdk.cjs","sources":["../src/helpers/wrapper.js","../src/helpers/validate.js","../src/index.js"],"sourcesContent":["import mitt from 'mitt';\n\nexport const emitter = mitt(); \n\nexport const wrapper = async (handler) => {\n  const result = await handler();\n\n  if (!!result.error) {\n    emitter.emit('aljaar:on:error', result.error);\n  }\n\n  return result;\n}\n","import joi from 'joi';\n\nconst phoneValidation = /^(^\\+62|62|^08)(\\d{3,4}-?){2}\\d{3,4}$/\n\nexport const signUp = (data) => {\n  const schema = joi.object({\n    full_name: joi.string().required(),\n    email: joi.string().email({ minDomainSegments: 2, tlds: { allow: ['com', 'net'] } }).required(),\n    password: joi.string().min(8).alphanum().required(),\n    phone: joi.string().regex(phoneValidation).required(),\n  });\n\n  return schema.validate(data);\n}\n\nexport const product = (data) => {\n  const schema = joi.object().keys({\n    title: joi.string().min(8).label('Title').required(),\n    description: joi.string().label('Description').required(),\n    category: joi.string().valid('food', 'non-food').label('Category').required(),\n    tags: joi.array().items(joi.number()).min(1).label('Tags').required(),\n    drop_point: joi.array().items(joi.number()).label('Pick Up Point').required(),\n    drop_time: joi.array().items(joi.string()).label('Pick Up Time').required(),\n    images: joi.array().items(joi.string()).min(1).label('Images').required(),\n    used_since: joi.when('category', {\n      is: joi.string().valid('non-food').required(),\n      then: joi.string().label('Used Since').required(),\n    }),\n    expired_at: joi.when('category', {\n      is: joi.string().valid('food').required(),\n      then: joi.date().iso().label('Expired Date').required(),\n    })\n  });\n\n  return schema.validate(data);\n}\n\nexport const editProduct = (data) => {\n  const schema = joi.object().keys({\n    title: joi.string().min(8).label('Title').optional(),\n    description: joi.string().label('Description').optional(),\n    category: joi.string().valid('food', 'non-food').label('Category').optional(),\n    tags: joi.array().items(joi.number()).label('Tags').optional(),\n    drop_point: joi.array().items(joi.number()).label('Pick Up Point').optional(),\n    drop_time: joi.array().items(joi.string()).label('Pick Up Time').optional(),\n    images: joi.array().items(joi.string()).label('Images').optional(),\n    used_since: joi.when('category', {\n      is: joi.string().valid('non-food').required(),\n      then: joi.string().label('Used Since').optional(),\n    }),\n    expired_at: joi.when('category', {\n      is: joi.string().valid('food').required(),\n      then: joi.date().iso().label('Expired Date').optional(),\n    })\n  });\n\n  return schema.validate(data);\n}\n\n","import { v4 as uuid } from 'uuid';\nimport { emitter, wrapper } from './helpers/wrapper';\nimport * as validator from './helpers/validate';\n\nfunction Aljaar({ supabase }) {\n  const states = {\n    auth_state: null,\n    session: null,\n    user: null\n  };\n  const redirect = {\n    onResetPassword: 'http://localhost:3000/'\n  }\n\n  const { data: { publicUrl: avatar_public } } = supabase.storage\n    .from('avatars')\n    .getPublicUrl('public/avatar.default.webp');\n\n  emitter.on('aljaar:on:error', (error) => {\n    console.info(error.message);\n  })\n\n  supabase.auth.onAuthStateChange((event, session) => {\n    console.log({ event, session })\n\n    states.auth_state = event;\n    \n    if (session) {\n      states.session = session;\n      states.user = session.user;\n    } else {\n      states.session = null;\n      states.user = null;\n    }\n\n    emitter.emit('aljaar:on:auth', { event, session });\n  });\n\n  return {\n    emitter,\n    auth: {\n      async user() {\n        const { data: { user } } = await supabase.auth.getUser();\n        const { data: profile } = await supabase.from(\"profiles\").select().eq(\"user_id\", user.id).single();\n        \n        user.profile = profile;\n        states.user = user;\n\n        return user;\n      },\n      signInWith ({ type, credential = {} }) {\n        switch (type) {\n          case 'google':\n          case 'facebook':\n          case 'github':\n            return wrapper(() => supabase.auth.signInWithOAuth({\n              provider: type\n            }));\n          case 'email':\n            return wrapper(() => supabase.auth.signInWithPassword({\n              email: credential.email,\n              password: credential.password,\n            }));\n        \n          default:\n            break;\n        }\n      },\n      async signUp (data) {\n        const { value: validated, error } = await wrapper(() => validator.signUp(data));\n      \n        if (error) {\n          return { data: null, error }\n        }\n\n        return wrapper(() => supabase.auth.signUp({\n          email: validated.email,\n          password: validated.password,\n          options: {\n            data: {\n              full_name: validated.full_name,\n              avatar_url: avatar_public,\n              phone: validated.phone\n            }\n          }\n        }))\n      },\n      signOut () {\n        return wrapper(() => supabase.auth.signOut());\n      },\n      resetPassword (email) {\n        return wrapper(() => supabase.auth.resetPasswordForEmail(email, {\n          redirectTo: redirect.onResetPassword,\n        }))\n      },\n      updateLocation () {\n        return new Promise((resolve) => {\n          if (!navigator.geolocation) {\n            resolve({ data: null, error: { message: \"Can't get user current location\" } })\n          }\n  \n          navigator.geolocation.getCurrentPosition((position) => {\n            const { error } = wrapper(() => supabase.from('profiles').update({\n              location: `SRID=4326;POINT(${position.coords.latitude} ${position.coords.longitude})`\n            }).eq('user_id', states.user.id))\n\n            resolve({ data: position.coords, error });\n          }, () => {\n\n          }, {\n            maximumAge:60000,\n            timeout:5000,\n            enableHighAccuracy:true\n          });\n        })\n      }\n    },\n    user: {\n      me () {\n\n      },\n      update (data) {\n\n      },\n      async getNeighborCount () {\n        const { data: count, error } = await supabase.rpc(\"get_neighbor_count\", {\n          radius: 200,\n        });\n\n        console.log(count, error)\n      },\n      async getNeighborProducts () {\n        const { data: count, error } = await supabase.rpc(\"get_neighbor_products\", {\n          radius: 200,\n        });\n\n        console.log(count, error)\n      },\n    },\n    product: {\n      async detail (id) {\n        const { data } = await wrapper(() => supabase\n          .from('products')\n          .select('*, product_tags!inner ( tags (id, name) )'))\n          .eq('id', id);\n\n        const products = data.map(product => {\n          const tags = product.product_tags;\n\n          delete product.product_tags;\n\n          return {\n            ...product,\n            images: product.images\n              .map(image => supabase.storage.from('products').getPublicUrl(image))\n              .map(image => image.data.publicUrl),\n            tags: tags.map(({ tags: { id, name } }) => ({ id, name }))\n          }\n        })\n\n        return products;\n      },\n      async all () {\n        const { data } = await wrapper(() => supabase\n          .from('products')\n          .select('*, product_images ( image ), product_tags!inner ( tags (id, name) )')\n          .eq('user_id', states.user?.id)\n        );\n\n        const products = data.map(product => {\n          const tags = product.product_tags;\n          const images = product.product_images;\n\n          delete product.product_tags;\n          delete product.product_images;\n\n          return {\n            ...product,\n            images: images\n              .map(({ image }) => supabase.storage.from('products').getPublicUrl(image))\n              .map(image => image.data.publicUrl),\n            tags: tags.map(({ tags: { id, name } }) => ({ id, name }))\n          }\n        })\n\n        return products;\n      },\n      async create ({ data, images }) {\n        // Image Upload\n        const uploadTasks = images.map(async (image) => {\n          const ext = image.name.split('.').pop();\n          const filename = `${uuid()}.${ext}`;\n\n          const { data } = await wrapper(() => supabase.storage\n            .from('products')\n            .upload(`${states.user.id}/${filename}`, image));\n\n          return data\n        });\n\n        const results = await Promise.all(uploadTasks);\n        //const results = [ { path: '87789b6c-b404-4c96-8abc-3ec09e7f5ff9/7dde18ab-36c8-4a41-a49e-6d04a637dd7e.png' } ];\n        const uploadedImages = results.map(image => image.path);\n\n        const [ lat, lon ] = data.drop_point;\n\n        const unvalidatedProduct = {\n          ...data,\n          images: uploadedImages\n        }\n\n        const { value: product, error } = await wrapper(() => validator.product(unvalidatedProduct));\n\n        if (error) {\n          return { data: null, error }\n        }\n\n        product.drop_point = `SRID=4326;POINT(${lat} ${lon})`;\n\n        return wrapper(() => supabase.rpc('create_product', {\n          product_raw: JSON.stringify(product),\n          images: uploadedImages,\n          drop_time: data.drop_time\n        }));\n      },\n      async update (id, { data }) {\n        // TODO: validate data\n        const { value: product, error } = await wrapper(() => validator.editProduct({\n          ...data,\n        }));\n\n        if (error) return { data: null, error };\n\n        const { tags } = product;\n        delete product.tags;\n\n        const update = await Promise.all([\n          wrapper(() => supabase.rpc('add_product_tag', {\n            p_id: id,\n            tags\n          })),\n          wrapper(() => supabase.from('products').update({\n            ...product\n          }).eq('id', id))\n        ]);\n\n        return {id, product, update};\n      },\n      async delete (id) {\n        return wrapper(() => supabase.rpc('delete_product', {\n          p_id: id\n        }));\n      }\n    },\n    lists: {\n\n    },\n    tags: {\n      all () {\n        return wrapper(() => supabase.from('tags').select('id, name').limit(8))\n      },\n      async search (query) {\n        return wrapper(() => supabase.from('tags').select('id, name').limit(8).ilike('name', `%${query}%`))\n      }\n    }\n  }\n}\n\nexport default Aljaar;\n"],"names":["emitter","mitt","wrapper","handler","then","result","error","emit","e","Promise","reject","supabase","states","auth_state","session","user","avatar_public","storage","from","getPublicUrl","data","publicUrl","on","console","info","message","auth","onAuthStateChange","event","log","getUser","_ref2","select","eq","id","single","profile","signInWith","_ref4","type","credential","_ref4$credential","signInWithOAuth","provider","signInWithPassword","email","password","signUp","validator","joi","object","full_name","string","required","minDomainSegments","tlds","allow","min","alphanum","phone","regex","phoneValidation","validate","validated","value","_ref5","options","avatar_url","signOut","resetPassword","resetPasswordForEmail","redirectTo","updateLocation","resolve","navigator","geolocation","getCurrentPosition","position","update","location","coords","latitude","longitude","maximumAge","timeout","enableHighAccuracy","me","getNeighborCount","rpc","radius","_ref6","getNeighborProducts","_ref7","product","detail","_ref8","map","product_tags","images","image","tags","_ref9","_ref9$tags","name","all","_states$user","_ref10","product_images","_ref12$tags","create","_ref13","ext","split","pop","filename","uuid","v4","upload","uploadTasks","results","uploadedImages","path","_data$drop_point","drop_point","lat","lon","unvalidatedProduct","_extends","keys","title","label","description","category","valid","array","items","number","drop_time","used_since","when","is","expired_at","date","iso","product_raw","JSON","stringify","optional","p_id","delete","lists","limit","search","query","ilike"],"mappings":"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"}