{"version":3,"file":"aljaar-sdk.modern.js","sources":["../src/helpers/wrapper.js","../src/helpers/validate.js","../src/index.js"],"sourcesContent":["import mitt from 'mitt';\n\nexport const emitter = mitt(); \n\nexport const wrapper = async (handler) => {\n  const result = await handler();\n\n  if (!!result.error) {\n    emitter.emit('aljaar:on:error', result.error);\n  }\n\n  return result;\n}\n","import joi from 'joi';\n\nconst phoneValidation = /^(^\\+62|62|^08)(\\d{3,4}-?){2}\\d{3,4}$/\n\nexport const signUp = (data) => {\n  const schema = joi.object({\n    full_name: joi.string().required(),\n    email: joi.string().email({ minDomainSegments: 2, tlds: { allow: ['com', 'net'] } }).required(),\n    password: joi.string().min(8).alphanum().required(),\n    phone: joi.string().regex(phoneValidation).required(),\n  });\n\n  return schema.validate(data);\n}\n\nexport const product = (data) => {\n  const schema = joi.object().keys({\n    title: joi.string().min(8).label('Title').required(),\n    description: joi.string().label('Description').required(),\n    category: joi.string().valid('food', 'non-food').label('Category').required(),\n    tags: joi.array().items(joi.number()).min(1).label('Tags').required(),\n    drop_point: joi.array().items(joi.number()).label('Pick Up Point').required(),\n    drop_time: joi.array().items(joi.string()).label('Pick Up Time').required(),\n    images: joi.array().items(joi.string()).min(1).label('Images').required(),\n    used_since: joi.when('category', {\n      is: joi.string().valid('non-food').required(),\n      then: joi.string().label('Used Since').required(),\n    }),\n    expired_at: joi.when('category', {\n      is: joi.string().valid('food').required(),\n      then: joi.date().iso().label('Expired Date').required(),\n    })\n  });\n\n  return schema.validate(data);\n}\n\nexport const editProduct = (data) => {\n  const schema = joi.object().keys({\n    title: joi.string().min(8).label('Title').optional(),\n    description: joi.string().label('Description').optional(),\n    category: joi.string().valid('food', 'non-food').label('Category').optional(),\n    tags: joi.array().items(joi.number()).label('Tags').optional(),\n    drop_point: joi.array().items(joi.number()).label('Pick Up Point').optional(),\n    drop_time: joi.array().items(joi.string()).label('Pick Up Time').optional(),\n    images: joi.array().items(joi.string()).label('Images').optional(),\n    used_since: joi.when('category', {\n      is: joi.string().valid('non-food').required(),\n      then: joi.string().label('Used Since').optional(),\n    }),\n    expired_at: joi.when('category', {\n      is: joi.string().valid('food').required(),\n      then: joi.date().iso().label('Expired Date').optional(),\n    })\n  });\n\n  return schema.validate(data);\n}\n\n","import { v4 as uuid } from 'uuid';\nimport { emitter, wrapper } from './helpers/wrapper';\nimport * as validator from './helpers/validate';\n\nfunction Aljaar({ supabase }) {\n  const states = {\n    auth_state: null,\n    session: null,\n    user: null\n  };\n  const redirect = {\n    onResetPassword: 'http://localhost:3000/'\n  }\n\n  const { data: { publicUrl: avatar_public } } = supabase.storage\n    .from('avatars')\n    .getPublicUrl('public/avatar.default.webp');\n\n  emitter.on('aljaar:on:error', (error) => {\n    console.info(error.message);\n  })\n\n  supabase.auth.onAuthStateChange((event, session) => {\n    console.log({ event, session })\n\n    states.auth_state = event;\n    \n    if (session) {\n      states.session = session;\n      states.user = session.user;\n    } else {\n      states.session = null;\n      states.user = null;\n    }\n\n    emitter.emit('aljaar:on:auth', { event, session });\n  });\n\n  return {\n    emitter,\n    auth: {\n      async user() {\n        const { data: { user } } = await supabase.auth.getUser();\n        const { data: profile } = await supabase.from(\"profiles\").select().eq(\"user_id\", user.id).single();\n        \n        user.profile = profile;\n        states.user = user;\n\n        return user;\n      },\n      signInWith ({ type, credential = {} }) {\n        switch (type) {\n          case 'google':\n          case 'facebook':\n          case 'github':\n            return wrapper(() => supabase.auth.signInWithOAuth({\n              provider: type\n            }));\n          case 'email':\n            return wrapper(() => supabase.auth.signInWithPassword({\n              email: credential.email,\n              password: credential.password,\n            }));\n        \n          default:\n            break;\n        }\n      },\n      async signUp (data) {\n        const { value: validated, error } = await wrapper(() => validator.signUp(data));\n      \n        if (error) {\n          return { data: null, error }\n        }\n\n        return wrapper(() => supabase.auth.signUp({\n          email: validated.email,\n          password: validated.password,\n          options: {\n            data: {\n              full_name: validated.full_name,\n              avatar_url: avatar_public,\n              phone: validated.phone\n            }\n          }\n        }))\n      },\n      signOut () {\n        return wrapper(() => supabase.auth.signOut());\n      },\n      resetPassword (email) {\n        return wrapper(() => supabase.auth.resetPasswordForEmail(email, {\n          redirectTo: redirect.onResetPassword,\n        }))\n      },\n      updateLocation () {\n        return new Promise((resolve) => {\n          if (!navigator.geolocation) {\n            resolve({ data: null, error: { message: \"Can't get user current location\" } })\n          }\n  \n          navigator.geolocation.getCurrentPosition((position) => {\n            const { error } = wrapper(() => supabase.from('profiles').update({\n              location: `SRID=4326;POINT(${position.coords.latitude} ${position.coords.longitude})`\n            }).eq('user_id', states.user.id))\n\n            resolve({ data: position.coords, error });\n          }, () => {\n\n          }, {\n            maximumAge:60000,\n            timeout:5000,\n            enableHighAccuracy:true\n          });\n        })\n      }\n    },\n    user: {\n      me () {\n\n      },\n      update (data) {\n\n      },\n      async getNeighborCount () {\n        const { data: count, error } = await supabase.rpc(\"get_neighbor_count\", {\n          radius: 200,\n        });\n\n        console.log(count, error)\n      },\n      async getNeighborProducts () {\n        const { data: count, error } = await supabase.rpc(\"get_neighbor_products\", {\n          radius: 200,\n        });\n\n        console.log(count, error)\n      },\n    },\n    product: {\n      async detail (id) {\n        const { data } = await wrapper(() => supabase\n          .from('products')\n          .select('*, product_tags!inner ( tags (id, name) )'))\n          .eq('id', id);\n\n        const products = data.map(product => {\n          const tags = product.product_tags;\n\n          delete product.product_tags;\n\n          return {\n            ...product,\n            images: product.images\n              .map(image => supabase.storage.from('products').getPublicUrl(image))\n              .map(image => image.data.publicUrl),\n            tags: tags.map(({ tags: { id, name } }) => ({ id, name }))\n          }\n        })\n\n        return products;\n      },\n      async all () {\n        const { data } = await wrapper(() => supabase\n          .from('products')\n          .select('*, product_images ( image ), product_tags!inner ( tags (id, name) )')\n          .eq('user_id', states.user?.id)\n        );\n\n        const products = data.map(product => {\n          const tags = product.product_tags;\n          const images = product.product_images;\n\n          delete product.product_tags;\n          delete product.product_images;\n\n          return {\n            ...product,\n            images: images\n              .map(({ image }) => supabase.storage.from('products').getPublicUrl(image))\n              .map(image => image.data.publicUrl),\n            tags: tags.map(({ tags: { id, name } }) => ({ id, name }))\n          }\n        })\n\n        return products;\n      },\n      async create ({ data, images }) {\n        // Image Upload\n        const uploadTasks = images.map(async (image) => {\n          const ext = image.name.split('.').pop();\n          const filename = `${uuid()}.${ext}`;\n\n          const { data } = await wrapper(() => supabase.storage\n            .from('products')\n            .upload(`${states.user.id}/${filename}`, image));\n\n          return data\n        });\n\n        const results = await Promise.all(uploadTasks);\n        //const results = [ { path: '87789b6c-b404-4c96-8abc-3ec09e7f5ff9/7dde18ab-36c8-4a41-a49e-6d04a637dd7e.png' } ];\n        const uploadedImages = results.map(image => image.path);\n\n        const [ lat, lon ] = data.drop_point;\n\n        const unvalidatedProduct = {\n          ...data,\n          images: uploadedImages\n        }\n\n        const { value: product, error } = await wrapper(() => validator.product(unvalidatedProduct));\n\n        if (error) {\n          return { data: null, error }\n        }\n\n        product.drop_point = `SRID=4326;POINT(${lat} ${lon})`;\n\n        return wrapper(() => supabase.rpc('create_product', {\n          product_raw: JSON.stringify(product),\n          images: uploadedImages,\n          drop_time: data.drop_time\n        }));\n      },\n      async update (id, { data }) {\n        // TODO: validate data\n        const { value: product, error } = await wrapper(() => validator.editProduct({\n          ...data,\n        }));\n\n        if (error) return { data: null, error };\n\n        const { tags } = product;\n        delete product.tags;\n\n        const update = await Promise.all([\n          wrapper(() => supabase.rpc('add_product_tag', {\n            p_id: id,\n            tags\n          })),\n          wrapper(() => supabase.from('products').update({\n            ...product\n          }).eq('id', id))\n        ]);\n\n        return {id, product, update};\n      },\n      async delete (id) {\n        return wrapper(() => supabase.rpc('delete_product', {\n          p_id: id\n        }));\n      }\n    },\n    lists: {\n\n    },\n    tags: {\n      all () {\n        return wrapper(() => supabase.from('tags').select('id, name').limit(8))\n      },\n      async search (query) {\n        return wrapper(() => supabase.from('tags').select('id, name').limit(8).ilike('name', `%${query}%`))\n      }\n    }\n  }\n}\n\nexport default Aljaar;\n"],"names":["emitter","mitt","async","result","error","emit","Aljaar","supabase","states","auth_state","session","user","data","publicUrl","avatar_public","storage","from","getPublicUrl","on","console","info","message","auth","onAuthStateChange","event","log","getUser","profile","select","eq","id","single","signInWith","type","credential","wrapper","signInWithOAuth","provider","signInWithPassword","email","password","value","validated","joi","object","full_name","string","required","minDomainSegments","tlds","allow","min","alphanum","phone","regex","phoneValidation","validate","validator","signUp","options","avatar_url","signOut","resetPassword","resetPasswordForEmail","redirectTo","updateLocation","resolve","navigator","geolocation","getCurrentPosition","position","update","location","coords","latitude","longitude","maximumAge","timeout","enableHighAccuracy","me","count","rpc","radius","product","map","tags","product_tags","_extends","images","image","name","_states$user","product_images","uploadTasks","ext","split","pop","uuid","upload","filename","uploadedImages","Promise","all","path","lat","lon","drop_point","unvalidatedProduct","keys","title","label","description","category","valid","array","items","number","drop_time","used_since","when","is","then","expired_at","date","iso","product_raw","JSON","stringify","optional","p_id","lists","limit","query","ilike"],"mappings":"qSAEaA,MAAAA,EAAUC,MAEAC,UACrB,MAAMC,YAMN,OAJMA,EAAOC,OACXJ,EAAQK,KAAK,kBAAmBF,EAAOC,OAGlCD,KCTe,wCCExB,SAASG,GAAOC,SAAEA,IAChB,MAAYC,EAAG,CACbC,WAAY,KACZC,QAAS,KACTC,KAAM,OAMAC,MAAQC,UAAWC,IAAoBP,EAASQ,QACrDC,KAAK,WACLC,aAAa,8BAsBhB,OApBAjB,EAAQkB,GAAG,kBAAoBd,IAC7Be,QAAQC,KAAKhB,EAAMiB,QAAO,GAG5Bd,EAASe,KAAKC,kBAAkB,CAACC,EAAOd,KACtCS,QAAQM,IAAI,CAAED,QAAOd,YAErBF,EAAOC,WAAae,EAEhBd,GACFF,EAAOE,QAAUA,EACjBF,EAAOG,KAAOD,EAAQC,OAEtBH,EAAOE,QAAU,KACjBF,EAAOG,KAAO,MAGhBX,EAAQK,KAAK,iBAAkB,CAAEmB,QAAOd,WAC1C,GAEO,CACLV,UACAsB,KAAM,CACJpB,aACE,MAAQU,MAAMD,KAAEA,UAAyBJ,EAACe,KAAKI,WACvCd,KAAMe,SAAkBpB,EAASS,KAAK,YAAYY,SAASC,GAAG,UAAWlB,EAAKmB,IAAIC,SAK1F,OAHApB,EAAKgB,QAAUA,EACfnB,EAAOG,KAAOA,EAEPA,CACT,EACAqB,YAAYC,KAAEA,EAAIC,WAAEA,EAAa,CAAG,IAClC,OAAQD,GACN,IAAK,SACL,IAAK,WACL,IAAK,SACH,OAAcE,EAAC,IAAM5B,EAASe,KAAKc,gBAAgB,CACjDC,SAAUJ,KAEd,IAAK,QACH,SAAe,IAAM1B,EAASe,KAAKgB,mBAAmB,CACpDC,MAAOL,EAAWK,MAClBC,SAAUN,EAAWM,YAM7B,EACAtC,aAAcU,GACZ,MAAQ6B,MAAOC,EAAStC,MAAEA,SAAgB+B,EAAQ,IDjEnCvB,IACN+B,EAAIC,OAAO,CACxBC,UAAWF,EAAIG,SAASC,WACxBR,MAAOI,EAAIG,SAASP,MAAM,CAAES,kBAAmB,EAAGC,KAAM,CAAEC,MAAO,CAAC,MAAO,UAAYH,WACrFP,SAAUG,EAAIG,SAASK,IAAI,GAAGC,WAAWL,WACzCM,MAAOV,EAAIG,SAASQ,MAAMC,GAAiBR,aAG/BS,SAAS5C,GCyDuC6C,CAAiB7C,IAEzE,OAAIR,EACK,CAAEQ,KAAM,KAAMR,SAGT+B,EAAC,IAAM5B,EAASe,KAAKoC,OAAO,CACxCnB,MAAOG,EAAUH,MACjBC,SAAUE,EAAUF,SACpBmB,QAAS,CACP/C,KAAM,CACJiC,UAAWH,EAAUG,UACrBe,WAAY9C,EACZuC,MAAOX,EAAUW,UAIzB,EACAQ,QAAO,IACS1B,EAAC,IAAM5B,EAASe,KAAKuC,WAErCC,cAAevB,KACE,IAAMhC,EAASe,KAAKyC,sBAAsBxB,EAAO,CAC9DyB,WAjFW,4BAoFfC,eAAc,IACL,YAAaC,IACbC,UAAUC,aACbF,EAAQ,CAAEtD,KAAM,KAAMR,MAAO,CAAEiB,QAAS,qCAG1C8C,UAAUC,YAAYC,mBAAoBC,IACxC,MAAMlE,MAAEA,GAAU+B,EAAQ,IAAM5B,EAASS,KAAK,YAAYuD,OAAO,CAC/DC,SAAW,mBAAkBF,EAASG,OAAOC,YAAYJ,EAASG,OAAOE,eACxE9C,GAAG,UAAWrB,EAAOG,KAAKmB,KAE7BoC,EAAQ,CAAEtD,KAAM0D,EAASG,OAAQrE,SACnC,EAAG,OAEA,CACDwE,WAAW,IACXC,QAAQ,IACRC,oBAAmB,GAEvB,IAGJnE,KAAM,CACJoE,KAEC,EACDR,OAAQ3D,GAEP,EACDV,yBACE,MAAQU,KAAMoE,EAAK5E,MAAEA,SAAwBG,EAAC0E,IAAI,qBAAsB,CACtEC,OAAQ,MAGV/D,QAAQM,IAAIuD,EAAO5E,EACrB,EACAF,4BACE,MAAQU,KAAMoE,EAAK5E,MAAEA,SAAgBG,EAAS0E,IAAI,wBAAyB,CACzEC,OAAQ,MAGV/D,QAAQM,IAAIuD,EAAO5E,EACrB,GAEF+E,QAAS,CACPjF,aAAc4B,GACZ,MAAMlB,KAAEA,WAAuB,IAAML,EAClCS,KAAK,YACLY,OAAO,8CACPC,GAAG,KAAMC,KAEKlB,EAAKwE,IAAID,IACxB,MAAME,EAAOF,EAAQG,aAIrB,cAFcH,EAACG,aAEfC,EAAA,GACKJ,EAAO,CACVK,OAAQL,EAAQK,OACbJ,IAAIK,GAASlF,EAASQ,QAAQC,KAAK,YAAYC,aAAawE,IAC5DL,IAAIK,GAASA,EAAM7E,KAAKC,WAC3BwE,KAAMA,EAAKD,IAAI,EAAGC,MAAQvD,KAAI4D,YAAQ,CAAQ5D,KAAI4D,WAEtD,GAEA,QACF,EACAxF,YACE,MAAMU,KAAEA,SAAeuB,EAAQ,KAAA,IAAAwD,EAAA,SAC5B3E,KAAK,YACLY,OAAO,uEACPC,GAAG,UAAsB,OAAXrB,EAAAA,EAAOG,WAAI,EAAXgF,EAAa7D,GAAE,GAmBhC,OAhBiBlB,EAAKwE,IAAID,IACxB,QAAaA,EAAQG,aACfE,EAASL,EAAQS,eAKvB,cAHcT,EAACG,oBACDH,EAACS,eAEfL,EAAA,CAAA,EACKJ,EACHK,CAAAA,OAAQA,EACLJ,IAAI,EAAGK,WAAYlF,EAASQ,QAAQC,KAAK,YAAYC,aAAawE,IAClEL,IAAIK,GAASA,EAAM7E,KAAKC,WAC3BwE,KAAMA,EAAKD,IAAI,EAAGC,MAAQvD,KAAI4D,YAAc,CAAE5D,KAAI4D,WAEtD,EAGF,EACAxF,cAAcU,KAAEA,EAAI4E,OAAEA,IAEpB,MAAMK,EAAcL,EAAOJ,IAAIlF,UAC7B,MAAM4F,EAAML,EAAMC,KAAKK,MAAM,KAAKC,QAChB,GAAEC,OAAUH,KAExBlF,KAAEA,SAAeuB,EAAQ,IAAM5B,EAASQ,QAC3CC,KAAK,YACLkF,OAAQ,GAAE1F,EAAOG,KAAKmB,MAAMqE,IAAYV,IAE3C,WAKkBW,SAFSC,QAACC,IAAIT,IAEHT,IAAIK,GAASA,EAAMc,OAE1CC,EAAKC,GAAQ7F,EAAK8F,WAEFC,EAAApB,EAAA,CAAA,EACnB3E,EACH4E,CAAAA,OAAQY,KAGF3D,MAAO0C,EAAO/E,MAAEA,SAAgB+B,EAAQ,IDpMhCvB,IACP+B,EAAIC,SAASgE,KAAK,CAC/BC,MAAOlE,EAAIG,SAASK,IAAI,GAAG2D,MAAM,SAAS/D,WAC1CgE,YAAapE,EAAIG,SAASgE,MAAM,eAAe/D,WAC/CiE,SAAUrE,EAAIG,SAASmE,MAAM,OAAQ,YAAYH,MAAM,YAAY/D,WACnEsC,KAAM1C,EAAIuE,QAAQC,MAAMxE,EAAIyE,UAAUjE,IAAI,GAAG2D,MAAM,QAAQ/D,WAC3D2D,WAAY/D,EAAIuE,QAAQC,MAAMxE,EAAIyE,UAAUN,MAAM,iBAAiB/D,WACnEsE,UAAW1E,EAAIuE,QAAQC,MAAMxE,EAAIG,UAAUgE,MAAM,gBAAgB/D,WACjEyC,OAAQ7C,EAAIuE,QAAQC,MAAMxE,EAAIG,UAAUK,IAAI,GAAG2D,MAAM,UAAU/D,WAC/DuE,WAAY3E,EAAI4E,KAAK,WAAY,CAC/BC,GAAI7E,EAAIG,SAASmE,MAAM,YAAYlE,WACnC0E,KAAM9E,EAAIG,SAASgE,MAAM,cAAc/D,aAEzC2E,WAAY/E,EAAI4E,KAAK,WAAY,CAC/BC,GAAI7E,EAAIG,SAASmE,MAAM,QAAQlE,WAC/B0E,KAAM9E,EAAIgF,OAAOC,MAAMd,MAAM,gBAAgB/D,eAInCS,SAAS5C,GCiLqC6C,CAAkBkD,IAExE,OAAIvG,EACK,CAAEQ,KAAM,KAAMR,UAGvB+E,EAAQuB,WAAc,mBAAkBF,KAAOC,KAExCtE,EAAQ,IAAM5B,EAAS0E,IAAI,iBAAkB,CAClD4C,YAAaC,KAAKC,UAAU5C,GAC5BK,OAAQY,EACRiB,UAAWzG,EAAKyG,aAEpB,EACAnH,aAAc4B,GAAIlB,KAAEA,IAElB,MAAQ6B,MAAO0C,EAAO/E,MAAEA,WAAwB,ID9L5BQ,IACX+B,EAAIC,SAASgE,KAAK,CAC/BC,MAAOlE,EAAIG,SAASK,IAAI,GAAG2D,MAAM,SAASkB,WAC1CjB,YAAapE,EAAIG,SAASgE,MAAM,eAAekB,WAC/ChB,SAAUrE,EAAIG,SAASmE,MAAM,OAAQ,YAAYH,MAAM,YAAYkB,WACnE3C,KAAM1C,EAAIuE,QAAQC,MAAMxE,EAAIyE,UAAUN,MAAM,QAAQkB,WACpDtB,WAAY/D,EAAIuE,QAAQC,MAAMxE,EAAIyE,UAAUN,MAAM,iBAAiBkB,WACnEX,UAAW1E,EAAIuE,QAAQC,MAAMxE,EAAIG,UAAUgE,MAAM,gBAAgBkB,WACjExC,OAAQ7C,EAAIuE,QAAQC,MAAMxE,EAAIG,UAAUgE,MAAM,UAAUkB,WACxDV,WAAY3E,EAAI4E,KAAK,WAAY,CAC/BC,GAAI7E,EAAIG,SAASmE,MAAM,YAAYlE,WACnC0E,KAAM9E,EAAIG,SAASgE,MAAM,cAAckB,aAEzCN,WAAY/E,EAAI4E,KAAK,WAAY,CAC/BC,GAAI7E,EAAIG,SAASmE,MAAM,QAAQlE,WAC/B0E,KAAM9E,EAAIgF,OAAOC,MAAMd,MAAM,gBAAgBkB,eAInCxE,SAAS5C,GC2KqC6C,CACjD7C,EAAAA,CAAAA,EAAAA,KAGL,GAAIR,EAAO,MAAO,CAAEQ,KAAM,KAAMR,SAEhC,MAAMiF,KAAEA,GAASF,SACHA,EAACE,KAEf,MAAYd,QAAS8B,QAAQC,IAAI,CAC/BnE,EAAQ,IAAM5B,EAAS0E,IAAI,kBAAmB,CAC5CgD,KAAMnG,EACNuD,UAEFlD,EAAQ,IAAM5B,EAASS,KAAK,YAAYuD,OACnCY,EAAAA,CAAAA,EAAAA,IACFtD,GAAG,KAAMC,MAGd,MAAO,CAACA,KAAIqD,UAASZ,SACvB,EACArE,OAAY,MAAE4B,KACG,IAAMvB,EAAS0E,IAAI,iBAAkB,CAClDgD,KAAMnG,MAIZoG,MAAO,CAEN,EACD7C,KAAM,CACJiB,IAAG,IACMnE,EAAQ,IAAM5B,EAASS,KAAK,QAAQY,OAAO,YAAYuG,MAAM,IAEtEjI,OAAY,MAAEkI,KACG,IAAM7H,EAASS,KAAK,QAAQY,OAAO,YAAYuG,MAAM,GAAGE,MAAM,OAAS,IAAGD,QAIjG"}